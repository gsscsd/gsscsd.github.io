<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>数据结构 - 标签 - Gsscsd</title>
        <link>https://gsscsd.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
        <description>数据结构 - 标签 - Gsscsd</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>gsscsd@outlook.com (Gsscsd)</managingEditor>
            <webMaster>gsscsd@outlook.com (Gsscsd)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 27 Dec 2018 09:10:17 &#43;0000</lastBuildDate><atom:link href="https://gsscsd.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" rel="self" type="application/rss+xml" /><item>
    <title>算法与数据结构</title>
    <link>https://gsscsd.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <pubDate>Thu, 27 Dec 2018 09:10:17 &#43;0000</pubDate><author>
        <name>Gsscsd</name>
    </author><guid>https://gsscsd.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
    <description><![CDATA[<h5 id="定义" class="headerLink">
    <a href="#%e5%ae%9a%e4%b9%89" class="header-mark"></a>定义</h5><blockquote>
<p><strong>算法</strong>:   算法中的指令描述的是一个计算，当其运行时能从一个初始状态和（可能为空的）初始输入开始，经过一系列<strong>有限</strong>而清晰定义的状态，最终产生<strong>输出</strong>并<strong>停止</strong>于一个终态。一个状态到另一个状态的转移不一定是确定的。随机化算法在内的一些算法，包含了一些随机输入.</p>
<p><strong>数据结构</strong>:  数据结构是计算机存储、组织数据的方式。数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率.</p>
</blockquote>
<blockquote>
<p>先说数据结构,毕竟算法也得有东西算,才又算法,所谓先有鸡后有蛋</p>
<p><strong>数据结构</strong>:既然是结构，里面肯定是有不同的数据的，与其叫数据结构，不如叫数据流,数据流中包含了各种数据，数据结构构成流，流亦是数据结构，面向对象就是，万物皆数据，以流的形式呈现.</p>
</blockquote>
<blockquote>
<p><strong>算法就是解决问题的方法</strong>,以函数或者是类的形式出现，它决定传入的参数，对数据流进行修改，留下需要的，抛弃不需要的，将数据和其他数据组成在一起，形成数据流，将数据流和数据流组成在一起，形成新的数据流，将数据流拆分成数据，再聚合，这就是算法的作用。</p>
<p><strong>算法就是数据流的灵魂,没有算法的数据其实没有灵魂的</strong></p>
</blockquote>]]></description>
</item><item>
    <title>数据结构之队列</title>
    <link>https://gsscsd.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%98%9F%E5%88%97/</link>
    <pubDate>Sun, 09 Apr 2017 10:27:41 &#43;0000</pubDate><author>
        <name>Gsscsd</name>
    </author><guid>https://gsscsd.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%98%9F%E5%88%97/</guid>
    <description><![CDATA[<h2 id="center-前言" class="headerLink">
    <a href="#center-%e5%89%8d%e8%a8%80" class="header-mark"></a><center >前言</h2><blockquote>
<p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。
队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出（FIFO—first in first out）线性表。</p>
</blockquote>]]></description>
</item><item>
    <title>数据结构之栈</title>
    <link>https://gsscsd.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%88/</link>
    <pubDate>Sun, 09 Apr 2017 09:52:17 &#43;0000</pubDate><author>
        <name>Gsscsd</name>
    </author><guid>https://gsscsd.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%88/</guid>
    <description><![CDATA[<h2 id="center-前言" class="headerLink">
    <a href="#center-%e5%89%8d%e8%a8%80" class="header-mark"></a><center >前言</h2><blockquote>
<p>栈（stack）又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。
栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。</p>
</blockquote>]]></description>
</item><item>
    <title>数据结构之链表</title>
    <link>https://gsscsd.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%93%BE%E8%A1%A8/</link>
    <pubDate>Wed, 15 Mar 2017 17:14:53 &#43;0000</pubDate><author>
        <name>Gsscsd</name>
    </author><guid>https://gsscsd.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%93%BE%E8%A1%A8/</guid>
    <description><![CDATA[<h2 id="center-前言" class="headerLink">
    <a href="#center-%e5%89%8d%e8%a8%80" class="header-mark"></a><center> 前言</h2><p><em>今天来写一下C语言对链表的实现，由于在严蔚敏老师的书里，引入了c++语言的引用类型，在c语言中，并没有这一种类型，我用二级指针来代替。</em></p>]]></description>
</item><item>
    <title>数据结构之顺序表</title>
    <link>https://gsscsd.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8/</link>
    <pubDate>Mon, 13 Mar 2017 14:17:08 &#43;0000</pubDate><author>
        <name>Gsscsd</name>
    </author><guid>https://gsscsd.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8/</guid>
    <description><![CDATA[<h2 id="center-前言" class="headerLink">
    <a href="#center-%e5%89%8d%e8%a8%80" class="header-mark"></a><center> 前言</h2><p><em>严蔚敏的《数据结构》书里面全是类c代码，是c也不是c，感觉好别扭，于是用c语言重新写一遍，遇到好些bug，记录一下。</em></p>
<p>以下出自<a href="http://baike.baidu.com/link?url=zgd9T0p46VwdJ0a2X90o5TrTiKZWrs24DWidX8Y4lEoIb-gIrC2OAkLqR_eyu74MUpBnHJb61HyV7EdbSTJidrY6QuaM4eEerhOl3jOeff5hp3QDs4YR2CjGnakauChR" target="_blank" rel="noopener noreferrer">百度百科</a></p>
<blockquote>
<p>顺序表是在计算机内存中以数组的形式保存的线性表，是指用一组地址连续的存储单元依次存储数据元素的线性结构。线性表采用顺序存储的方式存储就称之为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。</p>
</blockquote>]]></description>
</item></channel>
</rss>
